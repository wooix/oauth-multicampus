** 176 page
#data source settings
spring.datasource.url=jdbc:h2:tcp://localhost/~/test
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver

#JPA settings
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true




** 177 page

package com.multi.contactsapp.domain;
......
@Entity
public class Contact {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private long no;
  private String name;
  private String tel;
  private String address;

  //생성자와 Setter,Getter 생략
}




** 179 page

@Entity
@SequenceGenerator(name="CONTACT_SEQ_GENERATOR", 
  sequenceName="CONTACT_SEQ", initialValue=1, allocationSize=1)
public class Contact {
  @Id
  @GeneratedValue(strategy=GenerationType. SEQUENCE, generator="CONTACT_SEQ_GENERATOR")
  private int no;
  ...... 
}



** 180 page

package com.multi.contactsapp.dao;
......
public interface ContactRepository extends JpaRepository<Contact, Long>{

}



** 181 page

package com.multi.contactsapp;
......
@RestController
@RequestMapping(value="/contacts")
public class ContactController {
  @Autowired
  private ContactRepository contactRepository;
  
  @GetMapping()
  public List<Contact> getContactsAll() {
    return contactRepository.findAll(Sort.by(Sort.Direction.DESC, "no"));
  }
  @GetMapping("{no}")
  public Optional<Contact> getContactOne(@PathVariable("no") long no) {
    return contactRepository.findById(no);
  }
  @PostMapping
  public Contact insertContact(@RequestBody Contact c) {
    return contactRepository.save(c);
  }

  @PutMapping("{no}")
  public Contact updateContact(@RequestBody Contact c, @PathVariable("no") long no) {
    c.setNo(no);
    return contactRepository.save(c);
  }
  
  @DeleteMapping("{no}")
  public void deleteContact(@PathVariable("no") long no) {
    contactRepository.deleteById(no);
  }
}





** 185 page

package com.multi.contactsapp.dao;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.rest.core.annotation.RepositoryRestResource;

import com.multi.contactsapp.domain.Contact;

@RepositoryRestResource(collectionResourceRel = "contacts", path = "contacts2")
public interface ContactRepository extends JpaRepository<Contact, Long>{

}



** 187 page

package com.multi.contactsapp;
......
@Configuration
public class SpringRestConfig implements RepositoryRestConfigurer {

  @Override
  public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config, Corsregistry cors) {
     config.exposeIdsFor(Contact.class);
  }
}



** 190 page

package com.multi.contactsapp.dao;
......

@RepositoryRestResource(collectionResourceRel = "contacts", path = "contacts2")
public interface ContactRepository extends JpaRepository<Contact, Long>{
  @RestResource(path = "findbyname", exported = true) 
  List<Contact> findByNameContainingOrderByNameDesc(@Param("name") String name);
}



** 195 page

HAL Explorer를 사용하려면 다음의 의존성을 추가한 후 서버를 재시작해야 함.
<dependency>
   <groupId>org.springframework.data</groupId>
   <artifactId>spring-data-rest-hal-explorer</artifactId>
</dependency>



** 196 page

<dependency>
     <groupId>org.springframework.boot</groupId>
     <artifactId>spring-boot-starter-hateoas</artifactId>
</dependency>

@Entity
public class Contact extends RepresentationModel<Contact>{
  ......
}

- 컨트롤러 예시 : HalController.java

@GetMapping("{no}")
public ResponseEntity<EntityModel<Contact>> getContactByNo(@PathVariable("no") long no) {
	Contact contact = contactRepository.findById(no).get();
	EntityModel<Contact> entityModel = EntityModel.of(contact);
	WebMvcLinkBuilder linkTo = WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(this.getClass()).getContactByNo(no));
	entityModel.add(linkTo.withSelfRel());
	return ResponseEntity.ok(entityModel);
}

@GetMapping() 
public ResponseEntity<CollectionModel<EntityModel<Contact>>> getContactsAll() {
    List<EntityModel<Contact>> result = new ArrayList<>();
    List<Contact> contacts = contactRepository.findAll();

    for (final Contact contact : contacts) {
    	EntityModel<Contact> entityModel = EntityModel.of(contact);
    	Link selfLink = WebMvcLinkBuilder.linkTo(
    			WebMvcLinkBuilder.methodOn(this.getClass()).getContactByNo(contact.getNo())).withSelfRel();
             result.add(entityModel.add(selfLink));
    }
    Link link = WebMvcLinkBuilder.linkTo(this.getClass()).withSelfRel();
    return ResponseEntity.ok(CollectionModel.of(result, 
    		WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder.methodOn(this.getClass()).getContactsAll()).withSelfRel()));
}




** 200 page

package com.multi.contactsapp.dao;
......
@RepositoryRestResource(collectionResourceRel = "contacts", path = "contacts2")
public interface ContactRepository extends JpaRepository<Contact, Long>{
  //정렬만....
  @RestResource(path = "findbytel", exported = true) 
  List<Contact> findByTelStartingWith(@Param("tel") String tel, Sort sort);
  //페이징과 정렬 모두
  @RestResource(path = "findbyname", exported = true) 
  Page<Contact> findByNameContaining(@Param("name") String name, Pageable pageable);
}




** 201 page

http://localhost:8080/contacts2/search/findbytel?tel=010-2121&sort=name,desc
http://localhost:8080/contacts2/search/findbyname?name=정연&page=2&size=3




** 204 page

create table department (
  dept_id varchar(255) not null,
  dept_name varchar(255),
  location varchar(255),
  primary key (dept_id)
);
 
    
create table employee (
  emp_id varchar(255) not null,
  emp_name varchar(255),
  phone varchar(255),
  dept_id varchar(255) not null,
  primary key (emp_id)
);
    
alter table employee 
add constraint FK_dept_emp
foreign key (dept_id) 
references department;


INSERT INTO department (dept_id, dept_name, location) 
    VALUES ('D001', '총무부', '서울');
......

INSERT INTO employee (emp_id, emp_name, phone, dept_id) 
    VALUES ('E001', '홍길동', '010-2222-2221', 'D001');
......




** 205 page

package com.multi.contactsapp.domain;
......
@Entity
public class Department {
  @Id
  @Column(name="DEPT_ID")
  private String id;
  private String deptName;
  private String location;

}


package com.multi.contactsapp.domain;
......
@Entity
public class Employee {
  @Id
  @Column(name="EMP_ID")
  private String id;
  private String empName;
  private String phone;
  
  @ManyToOne(fetch = FetchType.EAGER)
  @JoinColumn(name="DEPT_ID", nullable = false)
  private Department department;
  
}




** 206 page

package com.multi.contactsapp.dao;
......
public interface DepartmentRepository  extends JpaRepository<Department, String> {

}



package com.multi.contactsapp.dao;
......
public interface EmployeeRepository  extends JpaRepository<Employee, String> {
    List<Employee> findByEmpNameStartingWith(String empName);
}



** 207 page

package com.multi.contactsapp;
......
@RestController
@RequestMapping(value="depts")
public class DepartmentController {
	@Autowired
	private DepartmentRepository departmentRepository;
	
	@GetMapping("{deptid}") 
	public Optional<Department> getDepartment(
		@PathVariable("deptid") String deptid) {
		return departmentRepository.findById(deptid);
	}
}

----------------------------------------------------------
package com.multi.contactsapp;
......
@RestController
@RequestMapping(value="emps")
public class EmployeeController {
  @Autowired
  private EmployeeRepository employeeRepository; 
	
	@GetMapping("find1/{name}") 
	public List<Employee> getDepartment1(
		@PathVariable("name") String name) {
		return employeeRepository.findByEmpNameStartingWith(name);  
	}	
}




** 209 page

package com.multi.contactsapp.domain;
......
@Entity
public class Department {
  @Id
  @Column(name = "DEPT_ID")
  private String id;
  private String deptName;
  private String location;
  
  @OneToMany(mappedBy = "department", fetch = FetchType.EAGER)
  private List<Employee> employees = new ArrayList<Employee>();  
  
  //employees 필드에 대한 setter,getter도 추가해야 함.
}




** 211 page

package com.multi.contactsapp.domain;
......
@Entity
public class Employee {
  ......
  @ManyToOne(fetch = FetchType.EAGER)
  @JoinColumn(name="DEPT_ID", nullable = false)
  private Department department;
  ......
  @JsonIgnore
  public Department getDepartment() {
    return department;
  }
  @JsonIgnore
  public void setDepartment(Department department) {
    this.department = department;
  }
  ......
}




** 213 page

@Entity
@JsonInclude(Include.NON_NULL)
public class Employee {
  ...... 
  @ManyToOne(fetch = FetchType.EAGER)
  @JoinColumn(name="DEPT_ID", nullable = false)
  private Department department;
  ......
  //@JsonIgnore
  public Department getDepartment() {
    return department; 
  }
  //@JsonIgnore
  public void setDepartment(Department department) {
    this.department = department;
  }
}



** 214 page

 @GetMapping("find2/{name}") 
  public List<Employee> getDepartment2(
    @PathVariable("name") String name) {
    List<Employee> employeeList = employeeRepository.findByEmpNameStartingWith(name); 
    if (employeeList.size() > 0) {
      for (Employee e : employeeList) {
        e.getDepartment().setEmployees(null);
      }
    }
    return employeeList;
  }


 - DepartmentController.java 에 추가할 메서드

  @GetMapping("{deptid}") 
  public Optional<Department> getDepartment(@PathVariable("deptid") String deptid) {
    Optional<Department> optDept = departmentRepository.findById(deptid);
    if (optDept.isPresent()) {
      Department dept = optDept.get();
      for (int i=0; i < dept.getEmployees().size(); i++) {
        dept.getEmployees().get(i).setDepartment(null);
      }
    }
    return optDept;
  }



** 217 page

 @Query("select e from Employee e " + 
      " left join fetch e.department d " + 
      " where e.empName like :name%")
  List<Employee> queryEmpByFetchJoin(String name);

  @Query("select e.id, e.empName, e.phone, d.id, d.deptName, d.location from Employee e " + 
      "join e.department d " + 
      "where e.empName like :name%")
  List<Object[]> queryEmpsByJPQL(String name);



** 218 page

@GetMapping("find3/{name}") 
public List<Employee> getDepartment3(@PathVariable("name") String name) {
  List<Employee> list = employeeRepository.queryEmpByFetchJoin(name);
  if (list.size() > 0) {
    for (Employee e : list) {
      e.getDepartment().setEmployees(null);
    }
  }
  return list;
}

@GetMapping("find4/{name}") 
public List<Employee> getDepartment4(@PathVariable("name") String name) {
  List<Object[]> list = employeeRepository.queryEmpsByJPQL(name);
  List<Employee> empList = new ArrayList<Employee>();
  if (list.size() > 0) {
    for (Object[] objs : list) {
      Employee e = new Employee((String)objs[0], (String)objs[1], (String)objs[2]);
      e.setDepartment(new Department((String)objs[3], (String)objs[4], (String)objs[5]));
      e.getDepartment().setEmployees(null);
      empList.add(e);
    }
  }
  return empList;
}






